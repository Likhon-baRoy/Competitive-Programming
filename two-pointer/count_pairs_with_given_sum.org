#+TITLE: Count Pairs with Given Sum
#+AUTHOR: Likhon Baroi
#+STARTUP: showall

* Table of Contents
1. [[#problem-link][Problem Link]]
2. [[#examples][Examples]]
3. [[#constraints][Constraints]]
4. [[#approach-1][Approach 1: Using Two-Pointer Technique]]
5. [[#approach-2][Approach 2: Two-Pointer with Identical Group Handling]]
6. [[#approach-3][Approach 3: HashMap]]

---

* Problem Link  :ID: problem-link
  [[https://www.geeksforgeeks.org/problems/count-pairs-with-given-sum--150253/1][Count Pairs with Given Sum - GeeksforGeeks]]

  Given an array `arr[]` and an integer `target`. You have to find the number of pairs in `arr[]` which sum up to the given `target`.

---

* Examples  :ID: examples
#+BEGIN_SRC text
Input: arr[] = [1, 5, 7, -1, 5], target = 6 
Output: 3
Explanation: Pairs with sum 6 are (1, 5), (7, -1), and (1, 5).
#+END_SRC

#+BEGIN_SRC text
Input: arr[] = [1, 1, 1, 1], target = 2 
Output: 6
Explanation: Pairs with sum 2 are (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1).
#+END_SRC

#+BEGIN_SRC text
Input: arr[] = [10, 12, 10, 15, -1], target = 125
Output: 0
#+END_SRC

---

* Constraints  :ID: constraints
#+BEGIN_SRC text
1 <= arr.size() <= 10^5
-10^4 <= arr[i] <= 10^4
1 <= target <= 10^4
#+END_SRC

---

* Approach 1: Using Two-Pointer Technique  :ID: approach-1
  - Sort the given array in `O(N log N)` time.
  - Use two pointers (`left` and `right`) to find valid pairs.
  - If the sum matches the `target`, count the pairs and move the pointers accordingly.
  - Special handling for identical elements.

**Time Complexity:**  
- Sorting the array takes `O(N log N)` time.  
- The two-pointer traversal takes `O(N)` time.  
- So, the total time complexity is `O(N log N)`.

**Space Complexity:**  
- `O(1)` for the space used by pointers and other variables.

#+BEGIN_SRC c++
int countPairs(vector<int> &arr, int target) {
    int left = 0, right = arr.size() - 1, cnt = 0;
    
    sort(arr.begin(), arr.end()); // Sort in O(N log N) time
    
    while (left < right) {
        int sum = arr[left] + arr[right];

        if (sum == target) {
            if (arr[left] == arr[right]) {  
                int freq = right - left + 1;  // Count of identical numbers
                cnt += (freq * (freq - 1)) / 2;  // nC2 formula
                break; 
            } else {
                int leftFreq = 0, rightFreq = 0;
                int leftVal = arr[left], rightVal = arr[right];

                while (left <= right && arr[left] == leftVal) {
                    leftFreq++;
                    left++;
                }
                while (left <= right && arr[right] == rightVal) {
                    rightFreq++;
                    right--;
                }

                cnt += (leftFreq * rightFreq);
            }
        } 
        else if (sum > target) right--;
        else left++;
    }
    
    return cnt;
}
#+END_SRC

**Go to Table of Contents**: [[#table-of-contents]]

---

* Approach 2: Two-Pointer with Identical Group Handling  :ID: approach-2
  - Similar to Approach 1, but handles identical groups differently.
  - If a group of numbers is identical (e.g., `[1, 1, 1, 1]`), we count combinations separately.
  - Uses `nC2` formula when `leftVal == rightVal`.

**Time Complexity:**  
- Sorting the array takes `O(N log N)` time.  
- The two-pointer traversal takes `O(N)` time.  
- So, the total time complexity is `O(N log N)`.

**Space Complexity:**  
- `O(1)` for the space used by pointers and other variables.

#+BEGIN_SRC c++
int countPairs(vector<int> &arr, int target) {
    int left = 0, right = arr.size() - 1, cnt = 0;
    
    sort(arr.begin(), arr.end());
    
    while (left < right) {
        
        int sum = arr[left] + arr[right];
        
        if (sum == target) {
            int leftFreq = 0, rightFreq = 0;
            int leftVal = arr[left], rightVal = arr[right];
            
            while (left <= right && leftVal == arr[left]) {
                leftFreq++;
                left++;
            }
            while (left <= right && rightVal == arr[right]) {
                rightFreq++;
                right--;
            }
            
            if (leftVal == rightVal) {
                cnt += (leftFreq * (leftFreq - 1)) / 2;
            } else cnt += (leftFreq * rightFreq);
        } else if (sum > target) right--;
        else left++;
    }
    
    return cnt;
}
#+END_SRC

**Go to Table of Contents**: [[#table-of-contents]]

---

* Approach 3: HashMap  :ID: approach-3
  - Efficient solution using HashMap to store the frequency of elements.
  - For each element, check if the difference `target - num` exists in the map.
  
**Time Complexity:**  
- The time complexity is `O(N)` since we are doing a single pass through the array.  
- Inserting into the hashmap takes `O(1)` time on average.

**Space Complexity:**  
- `O(N)` for the hashmap used to store frequencies of elements.

#+BEGIN_SRC c++  
int countPairs(vector<int> &arr, int target) {
    int cnt = 0;
    
    unordered_map<int, int> freq;
    
    for (int num : arr) {
        if (freq.find(target - num) != freq.end()) {
            cnt += freq[target - num];
        }
        freq[num]++;
    }
    
    
    return cnt;
}
#+END_SRC

**Go to Table of Contents**: [[#table-of-contents]]